if [ -n "$HOME" ]; then
    setEnv NIX_LINK "$HOME/.nix-profile"

    # Set the default profile.
    if ! [ -L "$NIX_LINK" ]; then
        echo "creating $NIX_LINK" >&2
        _NIX_DEF_LINK=@localstatedir@/nix/profiles/default
        @coreutils@/ln -s "$_NIX_DEF_LINK" "$NIX_LINK"
    fi

    prependEnv PATH "$NIX_LINK/sbin"
    prependEnv PATH "$NIX_LINK/bin"

    # Subscribe the user to the Nixpkgs channel by default.
    if [ ! -e $HOME/.nix-channels ]; then
        echo "https://nixos.org/channels/nixpkgs-unstable nixpkgs" > $HOME/.nix-channels
    fi

    # Append ~/.nix-defexpr/channels/nixpkgs to $NIX_PATH so that
    # <nixpkgs> paths work when the user has fetched the Nixpkgs
    # channel.
    # export NIX_PATH=${NIX_PATH:+$NIX_PATH:}nixpkgs=$HOME/.nix-defexpr/channels/nixpkgs
    if [ -z "$NIX_PATH" ]; then
        setEnv NIX_PATH "nixpkgs=$HOME/.nix-defexpr/channels/nixpkgs"
    else
        appendEnv NIX_PATH "nixpkgs=$HOME/.nix-defexpr/channels/nixpkgs"
    fi

    # Set $SSL_CERT_FILE so that Nixpkgs applications like curl work.
    if [ -e /etc/ssl/certs/ca-bundle.crt ]; then # Fedora, NixOS
        setEnv SSL_CERT_FILE /etc/ssl/certs/ca-bundle.crt
    elif [ -e /etc/ssl/certs/ca-certificates.crt ]; then # Ubuntu, Debian
        setEnv SSL_CERT_FILE /etc/ssl/certs/ca-certificates.crt
    elif [ -e "$NIX_LINK/etc/ca-bundle.crt" ]; then # fall back to Nix profile
        setEnv SSL_CERT_FILE "$NIX_LINK/etc/ca-bundle.crt"
    fi
fi
